// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package swagger generated by go-bindata.// sources:
// docs/gtool.swagger.json
package swagger

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docsGtoolSwaggerJson = []byte(`{
  "swagger": "2.0",
  "info": {
    "title": "gtool.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "GRPCTool"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/gRPCTool/call": {
      "post": {
        "summary": "一元RPC",
        "operationId": "GRPCTool_CallUnaryMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CallMethodRsp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallMethodReq"
            }
          }
        ],
        "tags": [
          "GRPCTool"
        ]
      }
    },
    "/gRPCTool/callBidirectionalStream": {
      "post": {
        "summary": "双向流式RPC",
        "operationId": "GRPCTool_CallBidirectionalStreamMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CallServerStreamMethodRsp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallBidirectionalStreamMethodReq"
            }
          }
        ],
        "tags": [
          "GRPCTool"
        ]
      }
    },
    "/gRPCTool/callClientStream": {
      "post": {
        "summary": "客户端流式RPC",
        "operationId": "GRPCTool_CallClientStreamMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CallMethodRsp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallClientStreamMethodReq"
            }
          }
        ],
        "tags": [
          "GRPCTool"
        ]
      }
    },
    "/gRPCTool/callServerStream": {
      "post": {
        "summary": "服务器端流式RPC",
        "operationId": "GRPCTool_CallServerStreamMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CallServerStreamMethodRsp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallMethodReq"
            }
          }
        ],
        "tags": [
          "GRPCTool"
        ]
      }
    },
    "/gRPCTool/methodParam": {
      "post": {
        "summary": "获取方法参数",
        "operationId": "GRPCTool_MethodParam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MethodParamRsp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodParamReq"
            }
          }
        ],
        "tags": [
          "GRPCTool"
        ]
      }
    },
    "/gRPCTool/serverInfo": {
      "post": {
        "summary": "获取服务信息",
        "operationId": "GRPCTool_ServerInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ServerInfoRsp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServerInfoReq"
            }
          }
        ],
        "tags": [
          "GRPCTool"
        ]
      }
    }
  },
  "definitions": {
    "CallBidirectionalStreamMethodReq": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "地址"
        },
        "service_name": {
          "type": "string",
          "title": "服务名"
        },
        "method_name": {
          "type": "string",
          "title": "方法名"
        },
        "complete": {
          "type": "boolean",
          "title": "是否结束调用"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "数据"
        }
      },
      "title": "调用双向流式RPC请求"
    },
    "CallClientStreamMethodReq": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "地址"
        },
        "service_name": {
          "type": "string",
          "title": "服务名"
        },
        "method_name": {
          "type": "string",
          "title": "方法名"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "数据"
        }
      },
      "title": "调用客户端流式RPC请求"
    },
    "CallMethodReq": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "地址"
        },
        "service_name": {
          "type": "string",
          "title": "服务名"
        },
        "method_name": {
          "type": "string",
          "title": "方法名"
        },
        "data": {
          "type": "string",
          "title": "数据"
        }
      },
      "title": "调用一元RPC接口请求"
    },
    "CallMethodRsp": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "string"
        }
      },
      "title": "调用一元RPC接口响应"
    },
    "CallServerStreamMethodRsp": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "调用服务端流式RPC响应"
    },
    "Method": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "method_name": {
          "type": "string",
          "title": "方法名称"
        },
        "method_type": {
          "$ref": "#/definitions/MethodType",
          "title": "方法类型"
        },
        "input_type": {
          "type": "string",
          "title": "输入类型"
        },
        "output_type": {
          "type": "string",
          "title": "输出类型"
        }
      },
      "title": "Method 方法"
    },
    "MethodParamReq": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "url"
        },
        "service_name": {
          "type": "string",
          "title": "服务名称"
        },
        "method_name": {
          "type": "string",
          "title": "方法名称"
        }
      },
      "title": "获取方法入参请求"
    },
    "MethodParamRsp": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "string"
        }
      },
      "title": "获取方法入参响应"
    },
    "MethodType": {
      "type": "string",
      "enum": [
        "Unary",
        "ServerStreaming",
        "ClientStreaming",
        "BidirectionalStreaming"
      ],
      "default": "Unary",
      "description": "- Unary: 一元RPC\n - ServerStreaming: 服务端流式RPC\n - ClientStreaming: 客户端流式RPC\n - BidirectionalStreaming: 双向流式RPC",
      "title": "方法类型"
    },
    "Server": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "title": "ip:port"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Service"
          },
          "title": "服务"
        }
      },
      "title": "Server 服务"
    },
    "ServerInfoReq": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "title": "获取服务信息请求"
    },
    "ServerInfoRsp": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/Server"
        }
      },
      "title": "获取服务信息响应"
    },
    "Service": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "service_name": {
          "type": "string",
          "title": "服务名称"
        },
        "methods": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Method"
          },
          "title": "方法集合"
        }
      },
      "title": "Service 服务提供者"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`+"`"+`path/google.protobuf.Duration`+"`"+`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `+"`"+`http`+"`"+`, `+"`"+`https`+"`"+`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `+"`"+`https`+"`"+` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `+"`"+`http`+"`"+`, `+"`"+`https`+"`"+` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`+"`"+`Any`+"`"+` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `+"`"+`Any`+"`"+` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `+"`"+`@type`+"`"+` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`+"`"+`value`+"`"+` which holds the custom JSON in addition to the `+"`"+`@type`+"`"+`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
`)

func docsGtoolSwaggerJsonBytes() ([]byte, error) {
	return _docsGtoolSwaggerJson, nil
}

func docsGtoolSwaggerJson() (*asset, error) {
	bytes, err := docsGtoolSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/gtool.swagger.json", size: 15129, mode: os.FileMode(420), modTime: time.Unix(1684026444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docs/gtool.swagger.json": docsGtoolSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"gtool.swagger.json": &bintree{docsGtoolSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
