// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: gtool.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GRPCTool_ServerInfo_FullMethodName             = "/GRPCTool/ServerInfo"
	GRPCTool_MethodParam_FullMethodName            = "/GRPCTool/MethodParam"
	GRPCTool_CallUnaryMethod_FullMethodName        = "/GRPCTool/CallUnaryMethod"
	GRPCTool_CallServerStreamMethod_FullMethodName = "/GRPCTool/CallServerStreamMethod"
	GRPCTool_CallClientStreamMethod_FullMethodName = "/GRPCTool/CallClientStreamMethod"
)

// GRPCToolClient is the client API for GRPCTool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCToolClient interface {
	// 获取服务信息
	ServerInfo(ctx context.Context, in *ServerInfoReq, opts ...grpc.CallOption) (*ServerInfoRsp, error)
	// 获取方法参数
	MethodParam(ctx context.Context, in *MethodParamReq, opts ...grpc.CallOption) (*MethodParamRsp, error)
	// 调用grpc接口
	CallUnaryMethod(ctx context.Context, in *CallMethodReq, opts ...grpc.CallOption) (*CallMethodRsp, error)
	// 服务器端流式RPC
	CallServerStreamMethod(ctx context.Context, in *CallMethodReq, opts ...grpc.CallOption) (*CallServerStreamMethodRsp, error)
	// 客户端流式RPC
	CallClientStreamMethod(ctx context.Context, in *CallClientStreamMethodReq, opts ...grpc.CallOption) (*CallMethodRsp, error)
}

type gRPCToolClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCToolClient(cc grpc.ClientConnInterface) GRPCToolClient {
	return &gRPCToolClient{cc}
}

func (c *gRPCToolClient) ServerInfo(ctx context.Context, in *ServerInfoReq, opts ...grpc.CallOption) (*ServerInfoRsp, error) {
	out := new(ServerInfoRsp)
	err := c.cc.Invoke(ctx, GRPCTool_ServerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCToolClient) MethodParam(ctx context.Context, in *MethodParamReq, opts ...grpc.CallOption) (*MethodParamRsp, error) {
	out := new(MethodParamRsp)
	err := c.cc.Invoke(ctx, GRPCTool_MethodParam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCToolClient) CallUnaryMethod(ctx context.Context, in *CallMethodReq, opts ...grpc.CallOption) (*CallMethodRsp, error) {
	out := new(CallMethodRsp)
	err := c.cc.Invoke(ctx, GRPCTool_CallUnaryMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCToolClient) CallServerStreamMethod(ctx context.Context, in *CallMethodReq, opts ...grpc.CallOption) (*CallServerStreamMethodRsp, error) {
	out := new(CallServerStreamMethodRsp)
	err := c.cc.Invoke(ctx, GRPCTool_CallServerStreamMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCToolClient) CallClientStreamMethod(ctx context.Context, in *CallClientStreamMethodReq, opts ...grpc.CallOption) (*CallMethodRsp, error) {
	out := new(CallMethodRsp)
	err := c.cc.Invoke(ctx, GRPCTool_CallClientStreamMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCToolServer is the server API for GRPCTool service.
// All implementations must embed UnimplementedGRPCToolServer
// for forward compatibility
type GRPCToolServer interface {
	// 获取服务信息
	ServerInfo(context.Context, *ServerInfoReq) (*ServerInfoRsp, error)
	// 获取方法参数
	MethodParam(context.Context, *MethodParamReq) (*MethodParamRsp, error)
	// 调用grpc接口
	CallUnaryMethod(context.Context, *CallMethodReq) (*CallMethodRsp, error)
	// 服务器端流式RPC
	CallServerStreamMethod(context.Context, *CallMethodReq) (*CallServerStreamMethodRsp, error)
	// 客户端流式RPC
	CallClientStreamMethod(context.Context, *CallClientStreamMethodReq) (*CallMethodRsp, error)
	mustEmbedUnimplementedGRPCToolServer()
}

// UnimplementedGRPCToolServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCToolServer struct {
}

func (UnimplementedGRPCToolServer) ServerInfo(context.Context, *ServerInfoReq) (*ServerInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerInfo not implemented")
}
func (UnimplementedGRPCToolServer) MethodParam(context.Context, *MethodParamReq) (*MethodParamRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodParam not implemented")
}
func (UnimplementedGRPCToolServer) CallUnaryMethod(context.Context, *CallMethodReq) (*CallMethodRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallUnaryMethod not implemented")
}
func (UnimplementedGRPCToolServer) CallServerStreamMethod(context.Context, *CallMethodReq) (*CallServerStreamMethodRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallServerStreamMethod not implemented")
}
func (UnimplementedGRPCToolServer) CallClientStreamMethod(context.Context, *CallClientStreamMethodReq) (*CallMethodRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallClientStreamMethod not implemented")
}
func (UnimplementedGRPCToolServer) mustEmbedUnimplementedGRPCToolServer() {}

// UnsafeGRPCToolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCToolServer will
// result in compilation errors.
type UnsafeGRPCToolServer interface {
	mustEmbedUnimplementedGRPCToolServer()
}

func RegisterGRPCToolServer(s grpc.ServiceRegistrar, srv GRPCToolServer) {
	s.RegisterService(&GRPCTool_ServiceDesc, srv)
}

func _GRPCTool_ServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCToolServer).ServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCTool_ServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCToolServer).ServerInfo(ctx, req.(*ServerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCTool_MethodParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodParamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCToolServer).MethodParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCTool_MethodParam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCToolServer).MethodParam(ctx, req.(*MethodParamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCTool_CallUnaryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCToolServer).CallUnaryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCTool_CallUnaryMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCToolServer).CallUnaryMethod(ctx, req.(*CallMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCTool_CallServerStreamMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCToolServer).CallServerStreamMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCTool_CallServerStreamMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCToolServer).CallServerStreamMethod(ctx, req.(*CallMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCTool_CallClientStreamMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallClientStreamMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCToolServer).CallClientStreamMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCTool_CallClientStreamMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCToolServer).CallClientStreamMethod(ctx, req.(*CallClientStreamMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCTool_ServiceDesc is the grpc.ServiceDesc for GRPCTool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCTool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GRPCTool",
	HandlerType: (*GRPCToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerInfo",
			Handler:    _GRPCTool_ServerInfo_Handler,
		},
		{
			MethodName: "MethodParam",
			Handler:    _GRPCTool_MethodParam_Handler,
		},
		{
			MethodName: "CallUnaryMethod",
			Handler:    _GRPCTool_CallUnaryMethod_Handler,
		},
		{
			MethodName: "CallServerStreamMethod",
			Handler:    _GRPCTool_CallServerStreamMethod_Handler,
		},
		{
			MethodName: "CallClientStreamMethod",
			Handler:    _GRPCTool_CallClientStreamMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gtool.proto",
}
